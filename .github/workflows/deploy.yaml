name: 'Deploy'

on:
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build-lambda-package:
    name: Build Lambda Deployment Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run build script
      run: ./create_lambda_package.sh
      shell: bash
    - name: Upload Lambda Deployment Package
      uses: actions/upload-artifact@v3
      with:
        name: lambda_build
        path: apple_utils.zip

  terraform-deploy-dev:
    name: 'Dev - Deploy Terraform'
    runs-on: ubuntu-latest
    needs: [build-lambda-package]
    environment: Development
    if: endsWith(github.ref, '/develop')

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./terraform

    # Configure AWS Creds DEV
    - name: Configure AWS Credentials Dev
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/GitHubActionsDeploymentRole-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
        role-session-name: terraform-deployment-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
        aws-region: ${{ vars.REGION }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.develop.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      run: terraform apply -var-file="develop.tfvars" --auto-approve -input=false


  terraform-deploy-prod:
    name: 'Prod - Deploy Terraform'
    runs-on: ubuntu-latest
    needs: [build-lambda-package]
    environment: production
    if: endsWith(github.ref, '/main')

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./terraform

    # Configure AWS Creds Prod
    - name: Configure AWS Credentials Prod
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/GitHubActionsDeploymentRole-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
        role-session-name: terraform-deployment-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
        aws-region: ${{ vars.REGION }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.main.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      run: terraform apply -var-file="main.tfvars" --auto-approve -input=false
